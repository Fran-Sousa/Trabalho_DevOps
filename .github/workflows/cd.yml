name: ToDo CD (ECR + ECS Fargate via CDK)

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: read

env:
  AWS_REGION:  ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  CDK_STACK_NAME: ${{ secrets.CDK_STACK_NAME }}
  IMAGE_TAG: ${{ github.ref_name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (access keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Quem sou eu?
        run: aws sts get-caller-identity
      
      - name: Ensure ECR repository exists
        run: |
          set -euo pipefail
          if ! aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1; then
            echo "ECR repo '$ECR_REPOSITORY' not found. Creating..."
            aws ecr create-repository --repository-name "$ECR_REPOSITORY" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256 \
              >/dev/null
          else
            echo "ECR repo '$ECR_REPOSITORY' already exists."
          fi

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image (production)
        run: |
          docker build \
            --target production \
            -t "$ECR_REPOSITORY:latest" \
            -t "$ECR_REPOSITORY:$IMAGE_TAG" \
            -f Dockerfile .

      - name: Push to ECR
        run: |
          set -euo pipefail
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGISTRY="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          docker tag "$ECR_REPOSITORY:$IMAGE_TAG" "$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker tag "$ECR_REPOSITORY:latest"    "$REGISTRY/$ECR_REPOSITORY:latest"
          docker push "$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$REGISTRY/$ECR_REPOSITORY:latest"
          echo "REGISTRY=$REGISTRY" >> "$GITHUB_ENV"
  
  cdk-deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configura credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Quem sou eu?
        run: aws sts get-caller-identity
      
      - name: Export AWS_DEFAULT_REGION (para CDK)
        run: echo "AWS_DEFAULT_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV

      - name: Setup Node (CDK CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install CDK
        run: npm install -g aws-cdk@2

      - name: Install CDK app deps
        working-directory: infra
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: CDK Synth
        working-directory: infra
        run: |
          cdk synth \
            --context imageTag="${{ env.IMAGE_TAG }}"

      - name: Deploy do CDK
        working-directory: infra
        run: |
          cdk deploy "${{ env.CDK_STACK_NAME }}" \
            --context imageTag="${{ env.IMAGE_TAG }}" \
            --require-approval never

      - name: Get API URL
        run: |
          # Aguarda alguns segundos para task ficar ready
          sleep 30

          # Obt√©m os nomes do cluster e service do CloudFormation
          CLUSTER_NAME=$(aws cloudformation describe-stacks --stack-name "${{ env.CDK_STACK_NAME }}" --query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' --output text 2>/dev/null || echo "")
          SERVICE_NAME=$(aws cloudformation describe-stacks --stack-name "${{ env.CDK_STACK_NAME }}" --query 'Stacks[0].Outputs[?OutputKey==`ServiceName`].OutputValue' --output text 2>/dev/null || echo "")

          # Se n√£o encontrou nos outputs, usa describe-stacks para pegar os recursos
          if [ -z "$CLUSTER_NAME" ] || [ -z "$SERVICE_NAME" ]; then
            CLUSTER_ARN=$(aws cloudformation describe-stack-resources --stack-name "${{ env.CDK_STACK_NAME }}" --query 'StackResources[?ResourceType==`AWS::ECS::Cluster`].PhysicalResourceId' --output text)
            CLUSTER_NAME=$(echo $CLUSTER_ARN | cut -d'/' -f2)
            SERVICE_ARN=$(aws cloudformation describe-stack-resources --stack-name "${{ env.CDK_STACK_NAME }}" --query 'StackResources[?ResourceType==`AWS::ECS::Service`].PhysicalResourceId' --output text)
            SERVICE_NAME=$(echo $SERVICE_ARN | cut -d'/' -f3)
          fi

          echo "üîç Obtendo IP p√∫blico da API..."
          PUBLIC_IP=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query 'taskArns[0]' --output text) --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text | xargs -I {} aws ec2 describe-network-interfaces --network-interface-ids {} --query 'NetworkInterfaces[0].Association.PublicIp' --output text)

          if [ ! -z "$PUBLIC_IP" ] && [ "$PUBLIC_IP" != "None" ]; then
            echo "‚úÖ API dispon√≠vel em: http://$PUBLIC_IP:8000"
            echo "üìù Documenta√ß√£o: http://$PUBLIC_IP:8000/docs"
          else
            echo "‚ö†Ô∏è  N√£o foi poss√≠vel obter o IP p√∫blico. A task pode ainda estar iniciando."
            echo "üìã Use este comando para obter o IP posteriormente:"
            echo "aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks \$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query 'taskArns[0]' --output text) --query 'tasks[0].attachments[0].details[?name==\`networkInterfaceId\`].value' --output text | xargs -I {} aws ec2 describe-network-interfaces --network-interface-ids {} --query 'NetworkInterfaces[0].Association.PublicIp' --output text"
          fi