name: PR Validation

on:
  pull_request:
    branches: [main, dev]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and run tests with Docker
      run: |
        docker build --target test -t task-manager-test .
        docker run --rm -v $(pwd)/coverage.xml:/app/coverage.xml task-manager-test
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Check code formatting with Black
      run: black --check --diff src/
      
    - name: Check import sorting with isort
      run: isort --check-only --diff src/
      
    - name: Lint with flake8
      run: flake8 src/
      
    - name: Type check with mypy
      run: mypy src/ --ignore-missing-imports

  build-production:
    name: Build Production Image
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build production image
      run: |
        docker build --target production -t task-manager-prod .

  build-development:
    name: Build Development Image
    runs-on: ubuntu-latest
    if: github.base_ref == 'dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build development image
      run: |
        docker build --target development -t task-manager-dev .